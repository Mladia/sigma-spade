#!/bin/bash

source ./args

log_location="${1}"

main() {


    control
    query
    #TODO:
    #if fast_output, run old query
    # old_query
    graph
}


control() {
    echo "---Control"
    echo "" >$COMMANDS_LOC

    echo "remove storage Neo4j" >> $COMMANDS_LOC
    sed -i '/^$/d' $COMMANDS_LOC
    docker exec -i  sigma-spade spade control < $COMMANDS_LOC

    docker exec -i sigma-spade rm -rf /SPADE/lib/neo4j-community-4.1.1/spade.graph

    echo "add storage Neo4j" >$COMMANDS_LOC
    echo "set storage Neo4j" >>$COMMANDS_LOC

    if [ -n "$log_location" ]; then
        new_log="audit-log-$(date "+%y-%m-%d-%H-%M").log"
        cp "$log_location" "$LOG_LOCATION/$new_log"
        echo "$LOG_LOCATION/$new_log"
        echo "add reporter Audit inputLog=/logs/$new_log" >>$COMMANDS_LOC
    else
        echo Audit log file needs to be supplied
    fi

    sed -i '/^$/d' $COMMANDS_LOC

    docker exec -i sigma-spade spade control <$COMMANDS_LOC 
    #for some reason we need this twice
    docker exec -i sigma-spade spade control <$COMMANDS_LOC >/dev/null 2>&1
}



query() {

    echo "" > "$COMMANDS_LOC"_query

    echo '$res = $base.getVertex(" " == '\'' '\'')' | docker exec -i spade_new spade query>/dev/null 2>&1

    feed=0
    while IFS="" read -r p || [ -n "$p" ]; do
        line=$(printf '%s\n' "$p")

        if [[ "${line:0:1}" == "#" ]]; then
            continue
        fi

        if [[ "${line:0:3}" == "---" ]]; then

            sed -r '/^\s*$/d' "$COMMANDS_LOC"_query

            echo '$res += $base.getVertex(%con)' >> "$COMMANDS_LOC"_query
            sed -r '/^\s*$/d' "$COMMANDS_LOC"_query | docker exec -i spade_new spade query >/dev/null 2>&1 

            echo 'dump $base.getVertex(%con)' | docker exec -i spade_new spade query  > /tmp/spade_log 2>&1

            while IFS= read -r line1
            do
                # If we find an empty line with '[', set the flag to 1
                if [[ "$line1" == "[" ]]
                then
                    flag=1
                elif [[ "$line1" == "]" ]]
                then
                    cat /tmp/spade--
                    echo "" > /tmp/spade--
                    flag=0
                    break
                fi

                # If the flag is set to 1, print the line to the temporary file
                if [[ "$flag" -eq 1 ]]
                then
                    echo "$line1" >> /tmp/spade--
                fi
            done < "/tmp/spade_log"
            
            echo '$res += $base.getVertex(%con)' >"$COMMANDS_LOC"_query

            echo ++++++++++++++++++++++++++
            echo
            echo "$line"
            echo '' > "$COMMANDS_LOC"_query
        else 
            echo "$line" >>"$COMMANDS_LOC"_query
        fi

    done <$spade_queries_filename

    echo 'dump $res' |  docker exec -i sigma-spade spade query 
}




graph() {
    echo "---Graph"
    cat << EOF > "$cache_directory/graph_query"
\$a_lineage = \$base.getLineage(\$res , 1, 'b')
dump all \$a_lineage
export > /export/vertex.dot
dump all \$a_lineage
EOF
    cat "$cache_directory/graph_query"
    echo "---"
    docker exec -i sigma-spade spade query < "$cache_directory/graph_query" 
    dot -Tsvg  "$export_location/vertex.dot" > "$export_location/last.svg"
}


main