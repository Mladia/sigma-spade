#!/bin/bash

source ./args

log_location="${1}"

main() {
    control
    query
    graph
}


control() {
    echo "---Control"
    echo "" >$COMMANDS_LOC

    echo "remove storage Neo4j" >> $COMMANDS_LOC
    sed -i '/^$/d' $COMMANDS_LOC
    docker exec -i  sigma-spade spade control < $COMMANDS_LOC

    docker exec -i sigma-spade rm -rf /SPADE/lib/neo4j-community-4.1.1/spade.graph

    echo "add storage Neo4j" >$COMMANDS_LOC
    echo "set storage Neo4j" >>$COMMANDS_LOC

    if [ -n "$log_location" ]; then
        new_log="audit-log-$(date "+%y-%m-%d-%H-%M").log"
        cp "$log_location" "$LOG_LOCATION/$new_log"
        echo "$LOG_LOCATION/$new_log"
        echo "add reporter Audit inputLog=/logs/$new_log" >>$COMMANDS_LOC
    else
        echo Audit log file needs to be supplied
    fi

    sed -i '/^$/d' $COMMANDS_LOC

    docker exec -i sigma-spade spade control <$COMMANDS_LOC 
    #for some reason we need this twice
    docker exec -i sigma-spade spade control <$COMMANDS_LOC >/dev/null 2>&1
}




query() {

    echo "" > "$COMMANDS_LOC"_query

    echo '$res = $base.getVertex(" " == '\'' '\'')' | docker exec -i sigma-spade spade query>/dev/null 2>&1

    for sq in ../spade-rules/*.sq
    do
        echo ---$sq:
        sed  -e '/^\s*$/d' -e '/^#/d' "$sq" > "$COMMANDS_LOC"_query

        printf "\n\$res = \$res + \$base.getVertex(%%con)\n" >> "$COMMANDS_LOC"_query

        cat "$COMMANDS_LOC"_query | docker exec -i sigma-spade spade query >/dev/null 2>&1 
        ####OR DEBUG:
        # cat "$COMMANDS_LOC"_query | docker exec -i sigma-spade spade query 

        cat "$COMMANDS_LOC"_query
        echo 'dump $base.getVertex(%con)' | docker exec -i sigma-spade spade query  > "$cache_directory"/spade_log 2>&1
        print_result_detection_rule "$cache_directory"/spade_log 
        #####OR DEBUG:
        # echo 'dump $base.getVertex(%con)' | docker exec -i sigma-spade spade query  

        echo ++++++++++++++++++++++++++
        #    echo Res: 
        #     echo 'dump $res' |  docker exec -i sigma-spade spade query >  "$cache_directory"/spade_log 2>&1
        #  print_result_detection_rule "$cache_directory"/spade_log  

        # echo 'dump $res' |  docker exec -i sigma-spade spade query 
        #     echo ++++++++++++++++++++++++++
        echo


    done

    echo 'dump $res' |  docker exec -i sigma-spade spade query 
}



query_single_detection_rule() {

    echo "" > "$COMMANDS_LOC"_query

    echo '$res = $base.getVertex(" " == '\'' '\'')' | docker exec -i sigma-spade spade query>/dev/null 2>&1


    #TODO: perfrom only if detection rule not Null
    for sq in ../spade-rules/*.sq
    do
        echo ---$sq:
        sed  -e '/^\s*$/d' -e '/^#/d' "$sq" > "$COMMANDS_LOC"_query

        #TODO: load spade query here

        printf "\n\$res = \$res + \$base.getVertex(%%con)\n" >> "$COMMANDS_LOC"_query

        cat "$COMMANDS_LOC"_query | docker exec -i sigma-spade spade query >/dev/null 2>&1 
        ####OR DEBUG:
        # cat "$COMMANDS_LOC"_query | docker exec -i sigma-spade spade query 

        cat "$COMMANDS_LOC"_query
        echo 'dump $base.getVertex(%con)' | docker exec -i sigma-spade spade query  > "$cache_directory"/spade_log 2>&1
        print_result_detection_rule "$cache_directory"/spade_log 
        #####OR DEBUG:
        # echo 'dump $base.getVertex(%con)' | docker exec -i sigma-spade spade query  

        echo ++++++++++++++++++++++++++
        #    echo Res: 
        #     echo 'dump $res' |  docker exec -i sigma-spade spade query >  "$cache_directory"/spade_log 2>&1
        #  print_result_detection_rule "$cache_directory"/spade_log  

        # echo 'dump $res' |  docker exec -i sigma-spade spade query 
        #     echo ++++++++++++++++++++++++++
        echo


    done

    echo 'dump $res' |  docker exec -i sigma-spade spade query 
}





print_result_detection_rule() {

        while IFS= read -r line1
        do
            # If we find an empty line with '[', set the flag to 1
            if [[ "$line1" == "[" ]]
            then
                flag=1
            elif [[ "$line1" == "]" ]]
            then
                cat /tmp/spade--
                echo "" > /tmp/spade--
                flag=0
                break
            fi

            # If the flag is set to 1, print the line to the temporary file
            if [[ "$flag" -eq 1 ]]
            then
                echo "$line1" >> /tmp/spade--
            fi
        done < "$1"

}


graph() {
    echo "---Graph"
    cat << EOF > "$cache_directory/graph_query"
dump all \$res
export > /export/export/vertex.dot
dump all \$res
\$a_lineage = \$base.getLineage(\$res , 1, 'b')
dump all \$a_lineage
export > /export/export/vertex_lin.dot
dump all \$a_lineage
EOF
    cat "$cache_directory/graph_query"
    echo "---"
    docker exec -i sigma-spade spade query < "$cache_directory/graph_query" 
    # dot -Tsvg  "$export_location/vertex.dot" > "$export_location/last.svg"
    # dot -Tsvg  "$export_location/vertex_lin.dot" > "$export_location/last_lin.svg"
}


main